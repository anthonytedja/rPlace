AWSTemplateFormatVersion: 2010-09-09

Resources:
  VPCInternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC

  VPCRoute:
    Type: "AWS::EC2::Route"
    DependsOn:
     - VPCRouteTable
     - VPCInternetGateway
    Properties:
      GatewayId: !Ref VPCInternetGateway
      RouteTableId: !Ref VPCRouteTable
      DestinationCidrBlock: "0.0.0.0/0"

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "172.31.0.0/16"

  VPCGatewayAttachment:
    DependsOn:
      - VPC
      - VPCInternetGateway
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref VPCInternetGateway
      VpcId: !Ref VPC

  VPCSubnet:
    Type: "AWS::EC2::Subnet"
    DependsOn: RedisSecurityGroup
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: "172.31.32.0/20"

  VPCSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn:
      - VPCRouteTable
      - VPCSubnet
    Properties:
      RouteTableId: !Ref VPCRouteTable
      SubnetId: !Ref VPCSubnet

  RedisSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    DependsOn: VPC
    Properties:
      GroupDescription: "Security group for redis"
      GroupName: "redis-security"
      VpcId: !Ref VPC
      SecurityGroupEgress: 
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
  
  RedisSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: RedisSecurityGroup
    Properties:
      GroupId: !Ref RedisSecurityGroup
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      IpProtocol: "-1"
      
  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    DependsOn: VPC
    Properties:
      GroupDescription: "Security group for ec2 instance"
      GroupName: "ec2-security"
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - CidrIp: "0.0.0.0/0"
          Description: "http"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22
        - CidrIp: "0.0.0.0/0"
          Description: "r/waste socket"
          FromPort: 8081
          IpProtocol: "tcp"
          ToPort: 8081
      SecurityGroupEgress: 
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"

  EC2SecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: EC2SecurityGroup
    Properties:
      GroupId: !Ref EC2SecurityGroup
      SourceSecurityGroupId: !Ref RedisSecurityGroup
      Description: "redis"
      IpProtocol: "tcp"
      FromPort: 6379
      ToPort: 6379

  EC2LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    DependsOn: VPCSubnet
    Properties:
      LaunchTemplateName: "EC2LaunchTemplate"
      LaunchTemplateData: 
          KeyName: "csc409a3ec2"
          ImageId: "ami-0d5409252f976c841"
          InstanceType: "t2.small"
          NetworkInterfaces:
            - AssociatePublicIpAddress: "True"
              DeviceIndex: 0
              SubnetId: !Ref VPCSubnet
              Groups: 
                - !Ref EC2SecurityGroup

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: EC2LaunchTemplate
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: "1"
  
  ElastiCacheSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    DependsOn: VPCSubnet
    Properties:
      CacheSubnetGroupName: "cache-subnet"
      Description: "subnet for cache"
      SubnetIds:
        - !Ref VPCSubnet

  ElastiCache:
    Type: "AWS::ElastiCache::CacheCluster"
    DependsOn: ElastiCacheSubnetGroup
    Properties:
      CacheNodeType: "cache.t3.micro"
      Engine: "redis"
      EngineVersion: "7.1"
      NumCacheNodes: 1
      CacheParameterGroupName: "default.redis7"
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RedisSecurityGroup
      ClusterName: "somecache-002"
  
  KeySpace:
    Type: "AWS::Cassandra::Keyspace"
    Properties:
      KeyspaceName: "r_place"


# ec2 security group      DONE
# elastic IP attach (probably not if elastic load balancer is going to be a thing)
# redis security group    DONE
# ec2 instance            DONE
# elasticache             DONE
# keyspaces               DONE
# VPC                     DONE
# cloudfront distribution 
# s3 bucket  