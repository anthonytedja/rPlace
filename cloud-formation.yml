AWSTemplateFormatVersion: 2010-09-09

Resources:
  VPCInternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  VPCRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC

  VPCRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - VPCRouteTable
      - VPCInternetGateway
    Properties:
      GatewayId: !Ref VPCInternetGateway
      RouteTableId: !Ref VPCRouteTable
      DestinationCidrBlock: '0.0.0.0/0'

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '172.31.0.0/16'

  VPCGatewayAttachment:
    DependsOn:
      - VPC
      - VPCInternetGateway
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref VPCInternetGateway
      VpcId: !Ref VPC

  VPCSubnet:
    Type: 'AWS::EC2::Subnet'
    DependsOn: RedisSecurityGroup
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 'us-east-1a'
      CidrBlock: '172.31.32.0/20'

  VPCSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - VPCRouteTable
      - VPCSubnet
    Properties:
      RouteTableId: !Ref VPCRouteTable
      SubnetId: !Ref VPCSubnet

  VPCSubnet2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: RedisSecurityGroup
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 'us-east-1b'
      CidrBlock: '172.31.0.0/20'

  VPCSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - VPCRouteTable
      - VPCSubnet2
    Properties:
      RouteTableId: !Ref VPCRouteTable
      SubnetId: !Ref VPCSubnet2

  RedisSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: VPC
    Properties:
      GroupDescription: 'Security group for redis'
      GroupName: 'redis-security'
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'

  RedisSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: RedisSecurityGroup
    Properties:
      GroupId: !Ref RedisSecurityGroup
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      IpProtocol: '-1'

  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: VPC
    Properties:
      GroupDescription: 'Security group for ec2 instance'
      GroupName: 'ec2-security'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          Description: 'http'
          FromPort: 80
          IpProtocol: 'tcp'
          ToPort: 80
        - CidrIp: '0.0.0.0/0'
          Description: 'r/waste socket'
          FromPort: 8081
          IpProtocol: 'tcp'
          ToPort: 8081
        - CidrIp: '0.0.0.0/0'
          FromPort: 22
          IpProtocol: 'tcp'
          ToPort: 22
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'

  EC2SecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: EC2SecurityGroup
    Properties:
      GroupId: !Ref EC2SecurityGroup
      SourceSecurityGroupId: !Ref RedisSecurityGroup
      Description: 'redis'
      IpProtocol: 'tcp'
      FromPort: 6379
      ToPort: 6379

  EC2LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    DependsOn: VPCSubnet
    Properties:
      LaunchTemplateName: 'EC2LaunchTemplate'
      LaunchTemplateData:
        KeyName: 'csc409a3ec2'
        ImageId: 'ami-07cb818f0a86f3bdb'
        InstanceType: 't2.small'
        NetworkInterfaces:
          - AssociatePublicIpAddress: 'True'
            DeviceIndex: 0
            SubnetId: !Ref VPCSubnet
            Groups:
              - !Ref EC2SecurityGroup

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: EC2LaunchTemplate
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: '1'

  EC2LaunchTemplate2:
    Type: 'AWS::EC2::LaunchTemplate'
    DependsOn: VPCSubnet2
    Properties:
      LaunchTemplateName: 'EC2LaunchTemplate2'
      LaunchTemplateData:
        KeyName: 'csc409a3ec2'
        ImageId: 'ami-07cb818f0a86f3bdb'
        InstanceType: 't2.small'
        NetworkInterfaces:
          - AssociatePublicIpAddress: 'True'
            DeviceIndex: 0
            SubnetId: !Ref VPCSubnet2
            Groups:
              - !Ref EC2SecurityGroup

  EC2Instance2:
    Type: 'AWS::EC2::Instance'
    DependsOn: EC2LaunchTemplate2
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate2
        Version: '1'

  ElasticLoadBalancingV2TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    DependsOn: EC2Instance
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "instance"
      Matcher: 
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      TargetGroupAttributes: 
        - 
          Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
          Value: "off"
        - 
          Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        - 
          Key: "stickiness.type"
          Value: "lb_cookie"
        - 
          Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        - 
          Key: "slow_start.duration_seconds"
          Value: "0"
        - 
          Key: "stickiness.app_cookie.duration_seconds"
          Value: "86400"
        - 
          Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
          Value: "off"
        - 
          Key: "load_balancing.cross_zone.enabled"
          Value: "use_load_balancer_configuration"
        - 
          Key: "load_balancing.algorithm.type"
          Value: "round_robin"
        - 
          Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
          Value: "1"
        - 
          Key: "stickiness.enabled"
          Value: "false"
        - 
          Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
          Value: "1"
        - 
          Key: "load_balancing.algorithm.anomaly_mitigation"
          Value: "off"
        - 
          Key: "stickiness.app_cookie.cookie_name"
          Value: ""
      Targets: 
        - 
          Id: !Ref EC2Instance
          Port: 80
        - 
          Id: !Ref EC2Instance2
          Port: 80

  ElasticLoadBalancingV2LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    DependsOn: 
      - ElasticLoadBalancingV2TargetGroup
    Properties:
      Scheme: "internet-facing"
      Type: "application"
      Subnets: 
        - !Ref VPCSubnet
        - !Ref VPCSubnet2
      SecurityGroups: 
        - !Ref EC2SecurityGroup
      IpAddressType: "ipv4"
      LoadBalancerAttributes: 
        - 
          Key: "access_logs.s3.enabled"
          Value: "false"
        - 
          Key: "idle_timeout.timeout_seconds"
          Value: "60"
        - 
          Key: "deletion_protection.enabled"
          Value: "false"
        - 
          Key: "routing.http2.enabled"
          Value: "true"
        - 
          Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"
        - 
          Key: "routing.http.xff_client_port.enabled"
          Value: "false"
        - 
          Key: "routing.http.preserve_host_header.enabled"
          Value: "false"
        - 
          Key: "routing.http.xff_header_processing.mode"
          Value: "append"
        - 
          Key: "load_balancing.cross_zone.enabled"
          Value: "true"
        - 
          Key: "routing.http.desync_mitigation_mode"
          Value: "defensive"
        - 
          Key: "waf.fail_open.enabled"
          Value: "false"
        - 
          Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
          Value: "false"
        - 
          Key: "connection_logs.s3.enabled"
          Value: "false"

  ElasticLoadBalancingV2Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn:
      - ElasticLoadBalancingV2LoadBalancer
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions: 
          - 
            TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
            Type: "forward"

  ElastiCacheSubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    DependsOn: VPCSubnet
    Properties:
      CacheSubnetGroupName: 'cache-subnet'
      Description: 'subnet for cache'
      SubnetIds:
        - !Ref VPCSubnet

  ElastiCache:
    Type: 'AWS::ElastiCache::CacheCluster'
    DependsOn: ElastiCacheSubnetGroup
    Properties:
      CacheNodeType: 'cache.t3.micro'
      Engine: 'redis'
      EngineVersion: '7.1'
      NumCacheNodes: 1
      CacheParameterGroupName: 'default.redis7'
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RedisSecurityGroup
      ClusterName: 'somecache-002'

  KeySpace:
    Type: 'AWS::Cassandra::Keyspace'
    Properties:
      KeyspaceName: 'r_place'

  ColorMappingsTable:
    Type: 'AWS::Cassandra::Table'
    Properties:
      TableName: 'color_mappings'
      KeyspaceName: !Ref KeySpace
      PartitionKeyColumns:
        - ColumnName: 'coordinatex'
          ColumnType: 'int'
        - ColumnName: 'coordinatey'
          ColumnType: 'int'
      RegularColumns:
        - ColumnName: 'color'
          ColumnType: 'int'
        - ColumnName: 'timestamp'
          ColumnType: 'timestamp'

  TimestampsTable:
    Type: 'AWS::Cassandra::Table'
    Properties:
      TableName: 'timestamps'
      KeyspaceName: !Ref KeySpace
      PartitionKeyColumns:
        - ColumnName: 'userip'
          ColumnType: 'text'
      RegularColumns:
        - ColumnName: 'timestamp'
          ColumnType: 'timestamp'

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'csc409a3bucket'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Sid: AllowPublicAccessToBucket
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'

  Cloudfront:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: 'S3Origin'
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: 'true'
        DefaultCacheBehavior:
          AllowedMethods:
            - 'GET'
            - 'HEAD'
          TargetOriginId: 'S3Origin'
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: 'none'
          ViewerProtocolPolicy: 'allow-all'
          CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'
        DefaultRootObject: 'index.html'
        PriceClass: 'PriceClass_100'
        HttpVersion: 'http2'
# ec2 security group      DONE
# elastic IP attach (probably not if elastic load balancer is going to be a thing)
# redis security group    DONE
# ec2 instance            DONE
# elasticache             DONE
# keyspaces               DONE
# VPC                     DONE
# cloudfront distribution NOT DONE
# s3 bucket               DONE
